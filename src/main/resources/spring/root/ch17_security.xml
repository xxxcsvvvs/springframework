<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 보안 필터 체인을 적용하지 않는 요청 경로 : 보안 필터 체인 설정보다 먼저 설정해야함 -->
	<security:http pattern="/resources/**" security="none" />

	<!-- 보안 필터 체인 설정 -->
	<security:http>
		<!-- 인증 방식 설정: Form 인증 방식 -->
		<!-- login-page만 컨트롤러가 처리하고 login-processing-url은 시큐리티가 처리해야하므로 컨트롤러에 login-processing-url로 매핑하면 안된다. -->
		<security:form-login 
			login-page="/ch17/loginForm"
			username-parameter="mid"
			password-parameter="mpassword"
			login-processing-url="/login"
			authentication-success-handler-ref="ch17AuthenticationSuccessHandler"
			authentication-failure-handler-ref="ch17AuthenticationFailureHandler" />
		
		
		<!-- POST 방식으로 요청하는 로그아웃 -->
		<security:logout logout-url="/logout"
			success-handler-ref="ch17LogoutSuccessHandler" />

		<!-- 사이트간 요청 위조 방지 비활성화 -->
		<!-- logout도 post 방식으로 요청(_csrf의 토큰을 전달해야함) -->
		<security:csrf disabled="true"/>
		
		 <!-- 요청 URL 권한 설정 방법1 -->
		<security:intercept-url pattern="/ch17/admin/**" access="hasRole('ROLE_ADMIN')"/> 
		<security:intercept-url pattern="/ch17/manager/**" access="hasRole('ROLE_MANAGER')"/> 
		<security:intercept-url pattern="/ch17/user/**" access="isAuthenticated()"/> 
		
		<security:intercept-url pattern="/**" access="permitAll" />

		<!-- 권한 없음일 경우 보여줄 페이지 설정 -->
		<security:access-denied-handler error-page="/ch17/error403" /> 
		</security:http>
		
		<!-- root폴더안에 작성했기 때문에 @Component를 사용할 수 없기 때문에 따로 작성해준다 -->
		<!-- 로그인 성공했을 때 -->
		<bean id="ch17AuthenticationSuccessHandler"
				class="com.mycompany.springframework.security.Ch17AuthenticationSuccessHandler">
				<property name="defaultTargetUrl" value="/"></property>
		</bean>
		<!-- 로그인 실패했을 때 -->
		<bean id="ch17AuthenticationFailureHandler"
				class="com.mycompany.springframework.security.Ch17AuthenticationFailureHandler">
				<property name="defaultFailureUrl" value="/ch17/loginForm"></property>
		</bean>
		
		<!-- 로그아웃 성공했을 때 -->
		<bean id="ch17LogoutSuccessHandler"
				class="com.mycompany.springframework.security.Ch17LogoutSuccessHandler">
				<property name="defaultTargetUrl" value="/ch17/loginForm"></property>
		</bean>

		<!-- 요청 URL 권한 설정 방법2 클래스 또는 메소드에 @Secured("ROLE_ADMIN")을 붙일 수 있도록 설정 -->
		<security:global-method-security
			secured-annotations="enabled"/>

	<!-- 관리자 객체를 만드는 방법은 어노테이션을 이용하는 방법과  xml로 설정하는 방법이 있다. 어노테이션을 이용해서 만들어줬기 때문에 xml을 이용한 방법은 삭제해준다.-->
	<!-- 인증 성공 또는 실패시 실행되는 핸들러 객체 설정 -->
	

	<!-- 인증 관리자 설정(아이디와 패스워드를 DB와 비교해서 로그인 처리 관리) -->
	<security:authentication-manager>
		<security:authentication-provider ref="daoAuthenticationProvider" />
	</security:authentication-manager>

	<!-- 인증 제공자 설정 -->
	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="ch17UserDetailsService" />
		<property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper" />
	</bean>

	
	<!-- 권한 계층 설정 -->
	<bean id="roleHierarchyAuthoritiesMapper"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		<constructor-arg ref="roleHierarchyImpl" />
	</bean>
	<bean id="roleHierarchyImpl"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<property name="hierarchy">
			<value>
				ROLE_ADMIN > ROLE_MANAGER
				ROLE_MANAGER > ROLE_USER
			</value>
		</property>
	</bean>
</beans>
